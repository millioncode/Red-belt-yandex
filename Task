Вам надо написать шаблонный класс Table для электронной таблицы. Для простоты будем считать, что все ячейки таблицы имеют один и тот же тип данных T. Таблица должна уметь менять свой размер по требованию пользователя. Вновь созданные ячейки должны заполняться значениями по умолчанию типа T.

Требования к классу такие:

Класс должен называться Table.
У класса должен быть шаблонный параметр T - тип элемента в ячейке.
У класса должен быть конструктор, получающий на входе два числа типа size_t, - количество строк и столбцов соответственно.
У класса должны быть константная и неконстантная версии оператора [], возвращающего нечто такое, к чему снова можно было бы применить оператор []. То есть, должны работать конструкции вида cout << table[i][j];и table[i][j] = value;. Проверять корректность индексов при этом не нужно.
У класса должна быть функция Resize, получающая на вход два параметра типа size_t и меняющая размер таблицы. Старые данные, умещающиеся в новый размер, должны при этом сохраниться.
У класса должен быть константный метод Size, возвращающий pair<size_t, size_t> размер таблицы (в том же порядке, в котором эти аргументы передавались в конструктор).


Решение от разработчиков:

#include <iostream>
#include <utility>
#include <vector>

using namespace std;

template <typename T>
class Table {
 private:
  vector<vector<T>> data;

 public:
  Table(size_t rows, size_t columns) {
    Resize(rows, columns);
  }

  const vector<T>& operator [] (size_t idx) const {
    return data[idx];
  }

  vector<T>& operator [] (size_t idx) {
    return data[idx];
  }

  void Resize(size_t rows, size_t columns) {
    data.resize(rows);
    for (auto& item : data) {
      item.resize(columns);
    }
  }

  pair<size_t, size_t> Size() const {
    return {data.size(), (data.empty() ? 0 : data[0].size())};
  }

};
