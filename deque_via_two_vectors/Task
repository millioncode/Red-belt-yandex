Условие
Напишите шаблонный класс Deque, содержащий следующий набор методов:

конструктор по умолчанию;
константный метод Empty, возвращающий true, если дек не содержит ни одного элемента;
константный метод Size, возвращающий количество элементов в деке;
T& operator[](size_t index) и const T& operator[](size_t index) const;
константный и неконстантный метод At(size_t index), генерирующий стандартное исключение out_of_range, если индекс больше или равен количеству элементов в деке;;
константные и неконстантные версии методов Front и Back, возвращающих ссылки на первый и последний элемент дека соответственно;
методы PushFront и PushBack.
Неконстантные версии методов должны позволять изменять соответствующий элемент дека.

Для реализации заведите внутри класса Deque два вектора: в один осуществляйте вставку в методе PushFront, а в другой — в методе PushBack.

Замечание
Заголовочный файл, который вы пришлёте на проверку, не должен подключать файлы <list>, <deque>, <set>, <map>. Если у вас будет подключен один из этих файлов, вы получите ошибку компиляции.

Решение от разработчиков:

#include <cstddef>
#include <stdexcept>
#include <utility>
#include <vector>

using namespace std;

template <typename T>
class Deque {
 private:
  vector<T> head, tail;

  void CheckIndex(size_t i) const {
    if (i >= Size())
      throw out_of_range("Index is out of range");
  }

 public:
  Deque() = default;

  bool Empty() const {
    return head.empty() && tail.empty();
  }

  size_t Size() const {
    return head.size() + tail.size();
  }

  void Clear() {
    head.clear();
    tail.clear();
  }

  const T& operator [] (size_t i) const {
    return i < head.size() ? head[head.size() - i - 1] : tail[i - head.size()];
  }

  T& operator [] (size_t i) {
    return i < head.size() ? head[head.size() - i - 1] : tail[i - head.size()];
  }

  const T& At(size_t i) const {
    CheckIndex(i);
    return (*this)[i];
  }

  T& At(size_t i) {
    CheckIndex(i);
    return (*this)[i];
  }

  const T& Front() const {
    return head.empty() ? tail.front() : head.back();
  }

  T& Front() {
    return head.empty() ? tail.front() : head.back();
  }

  const T& Back() const {
    return tail.empty() ? head.front() : tail.back();
  }

  T& Back() {
    return tail.empty() ? head.front() : tail.back();
  }

  void PushFront(const T& elem) {
    head.push_back(elem);
  }

  void PushBack(const T& elem) {
    tail.push_back(elem);
  }
};
